/*******************************************************************************/
/**
 * @file MatrixStacker.h.
 * 
 * @brief 行列スタッククラスヘッダファイル.
 *
 * @date 2008/10/19.
 * 
 * @version 1.00.
 * 
 * @author Kentarou Nishimura.
 */
/******************************************************************************/
#ifndef _NGL_MATRIXSTACKER_H_
#define _NGL_MATRIXSTACKER_H_

#include	<Ngl/Matrix4.h>
#include	<stack>

namespace Ngl{


/**
 * @class MatrixStacker.
 * @brief 行列スタッククラス．
 */
class MatrixStacker
{

public:

	/*=========================================================================*/
	/**
	 * @brief コンストラクタ
	 * 
	 * @param[in] なし.
	 */
	MatrixStacker();


	/*=========================================================================*/
	/**
	 * @brief デストラクタ
	 * 
	 * @param[in] なし.
	 */
	~MatrixStacker();


	/*=========================================================================*/
	/**
	 * @brief 初期化処理
	 * 
	 * @param[in] なし.
	 * @return なし.
	 */
	void initialize();
	
	
	/*=========================================================================*/
	/**
	 * @brief 単位行列をプッシュする
	 * 
	 * @param[in] なし.
	 * @return なし.
	 */
	void push();


	/*=========================================================================*/
	/**
	 * @brief 先頭の行列をポップする
	 * 
	 * @param[in] なし.
	 * @return なし.
	 */
	void pop();
	
	
	/*=========================================================================*/
	/**
	 * @brief リストをすべて削除
	 * 
	 * @param[in] なし.
	 * @return なし.
	 */
	void clearList();


	/*=========================================================================*/
	/**
	 * @brief 現在の行列に行列を乗算する
	 * 
	 * @param[in] matrix 乗算する行列.
	 * @return なし.
	 */
	void multiply( const Ngl::Matrix4& matrix );


	/*=========================================================================*/
	/**
	 * @brief 結果を取得する
	 * 
	 * @param[in] なし.
	 * @return result.
	 */
	const Ngl::Matrix4& getResult() const;


	/*=========================================================================*/
	/**
	 * @brief 要素が空か調べる
	 * 
	 * @param[in] なし.
	 * @retval true 要素がある.
	 * @retval false 要素が無い.
	 */
	bool isEmpty();

private:

	/** 行列保管クラス */
	std::stack< Ngl::Matrix4 >	stack_;	

};

} // namespace Ngl

#endif

/*===== EOF ==================================================================*/